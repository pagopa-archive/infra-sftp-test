# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'skipBuild'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: false

resources:
  - repo: self

variables:
  vmImageNameDefault: 'ubuntu-22.04'
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'
  helmReleaseName : '$(HELM_RELEASE_NAME)'

  # ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release-dev') }}:
  #   environment: 'DEV'
  #   dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
  #   kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
  #   containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
  #   selfHostedAgentPool: $(DEV_AGENT_POOL)
  # ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release-uat') }}:
  #   environment: 'UAT'
  #   dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
  #   kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
  #   containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
  #   selfHostedAgentPool: $(UAT_AGENT_POOL)
  # ${{ elseif startsWith(variables['Build.SourceBranch'], 'refs/heads/release-prod') }}:
  #   environment: 'PROD'
  #   dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
  #   kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
  #   containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
  #   selfHostedAgentPool: $(PROD_AGENT_POOL)
  # ${{ else }}:
  #   environment: 'DEV'
  #   dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
  #   kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
  #   containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
  #   selfHostedAgentPool: $(DEV_AGENT_POOL)

stages:
  - stage: 'Build'
    displayName: 'Build_and_Publish_to_${{ variables.environment }}'
    condition: and(succeeded(), not(${{ parameters.skipBuild }} ))
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest

  - stage: 'publish_artifact_helm'
    displayName: 'Publish_artifact_Helm'
    dependsOn: ['build']
    jobs:
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm_1mb
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/1mb'
              artifact: '1mb'
              publishLocation: 'pipeline'
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm_100mb
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/100mb'
              artifact: '100mb'
              publishLocation: 'pipeline'
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm_1gb
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/1gb'
              artifact: '1gb'
              publishLocation: 'pipeline'
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm_4gb
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/4gb'
              artifact: '4gb'
              publishLocation: 'pipeline'

  - stage: 'deploy'
    displayName: 'Deploy to ${{ variables.environment }} K8S'
    dependsOn: ['publish_artifact_helm']
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S 1mb'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '1mb'
                    targetPath: '$(Pipeline.Workspace)/1mb'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/1mb'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/1mb/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 3m0s --debug"
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S 100mb'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '100mb'
                    targetPath: '$(Pipeline.Workspace)/100mb'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/100mb'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/100mb/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 3m0s --debug"
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S 1gb'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '1gb'
                    targetPath: '$(Pipeline.Workspace)/1gb'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/1gb'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/1gb/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 3m0s --debug"
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S 4gb'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '4gb'
                    targetPath: '$(Pipeline.Workspace)/4gb'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/4gb'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/4gb/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S 1mb'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '1mb'
                    targetPath: '$(Pipeline.Workspace)/1mb'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/1mb'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/1mb/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 3m0s --debug"
                    arguments: "--timeout 3m0s --debug"
